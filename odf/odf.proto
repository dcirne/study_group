// Copyright 2019 Dalmo Cirne
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/any.proto";

package ODF;

enum DataType {
  UNSPECIFIED = 0;
  DOUBLE = 1;
  FLOAT = 2;
  INT32 = 3;        // Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint32 instead.
  INT64 = 4;        // Uses variable-length encoding. Inefficient for encoding negative numbers – if your field is likely to have negative values, use sint64 instead.
  UINT32 = 5;       // Uses variable-length encoding.
  UINT64 = 6;       // Uses variable-length encoding.
  SINT32 = 7;       // Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s.
  SINT64 = 8;       // Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s.
  FIXED32 = 9;      // Always four bytes. More efficient than uint32 if values are often greater than 2^28.
  FIXED64 = 10;     // Always eight bytes. More efficient than uint64 if values are often greater than 2^56.
  SFIXED32 = 11;    // Always four bytes.
  SFIXED64 = 12;    // Always eight bytes.
  BOOL = 13;
  STRING = 14;      // A string must always contain UTF-8 encoded or 7-bit ASCII text, and cannot be longer than 2^32.
  BYTES = 15;       // May contain any arbitrary sequence of bytes no longer than 2^32.
  FOO = 100;        // Classes have data types 100 and above, in case more primitive data types are introduced by protobuf
  BAR = 101;
}

message Value {
  double date_time = 1;
  google.protobuf.Any value = 2;
}

message InfoItem {
  string name = 1;
  string description = 2;
  repeated Value values = 3;
}

message Object {
  string id = 1;
  DataType data_type = 2;
  InfoItem info_item = 3;
}

message Objects {
  int32 version = 1;
  repeated Object objects = 2;
}
